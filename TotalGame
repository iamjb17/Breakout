import acm.graphics.*;
import acm.program.*;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Breakout extends GraphicsProgram {

/** Width and height of application window in pixels */
	public static final int APPLICATION_WIDTH = 400;
	public static final int APPLICATION_HEIGHT = 600;

/** Dimensions of game board (usually the same) */
	private static final int WIDTH = APPLICATION_WIDTH;
	private static final int HEIGHT = APPLICATION_HEIGHT;

/** Dimensions of the paddle */
	private static final int PADDLE_WIDTH = 60;
	private static final int PADDLE_HEIGHT = 10;

/** Offset of the paddle up from the bottom */
	private static final int PADDLE_Y_OFFSET = 40;

/** Number of bricks per row */
	private static final int NBRICKS_PER_ROW = 10;

/** Number of rows of bricks */
	private static final int NBRICK_ROWS = 10;

/** Separation between bricks */
	private static final int BRICK_SEP = 4;

/** Width of a brick */
	private static final int BRICK_WIDTH =
	  (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;

/** Height of a brick */
	private static final int BRICK_HEIGHT = 8;

/** Radius of the ball in pixels */
	private static final int BALL_RADIUS = 10;

/** Offset of the top brick row from the top */
	private static final int BRICK_Y_OFFSET = 70;

/** Number of turns */
	private static final int NTURNS = 3;
	
	private GRect brick;
	private GRect paddle;
	private GOval ball;
	private RandomGenerator rgen = RandomGenerator.getInstance();
	private double vx, vy;
	private GPoint a;
	private GPoint b;
	private GPoint c;
	private GPoint d;
	private int turns = NTURNS;
	
/* Method: run() */
/** Runs the Breakout program. */
	public void run() {
		
		setSize(APPLICATION_WIDTH, APPLICATION_HEIGHT);
		createBricks();
		createPaddle();
		createBall();
		addMouseListeners();
		startGame();
	}
  
	// Listener for the paddle movement
	public void mouseMoved(MouseEvent e){
	if (paddle.getX()<= APPLICATION_WIDTH- PADDLE_WIDTH ){
		paddle.setLocation(e.getX(), paddle.getY());
		} else {
			paddle.setLocation(APPLICATION_WIDTH-PADDLE_WIDTH, paddle.getY());
		}
	}
  
	// Create the ball and set the position
	private void createBall(){	
		ball = new GOval((APPLICATION_WIDTH/2) - BALL_RADIUS,
                    (APPLICATION_HEIGHT/2) + BALL_RADIUS, 
                    BALL_RADIUS*2,BALL_RADIUS*2);
		add(ball);
		ball.setFilled(true);
		vx = rgen.nextDouble(1.0, 3.0);
		vy = 10.0;
		//gmove(); // For testing purposes only
	}
  
	// Method to start the game if the game isnt over
	private void startGame(){
		while(true){
			if (gameOver()){
				break;
			}
		gmove();
		collisionCheck();
		pause(50);
		}
	}
  
	// Check if the user is out of turns
	private boolean gameOver(){
		boolean end = false;
		if (turns == 0){
		end = true;	
		}
		return end;
	}
	private void loseLife(){
		turns -= 1;
	}
	
  // Check for balls collisions with the rest of the world and its reaction 
	private void collisionCheck(){
		if (ball.getY()>= APPLICATION_HEIGHT-ball.getHeight()){
			loseLife();
			remove(ball);
			createBall();
		} 
    if (ball.getX()+(2*BALL_RADIUS) >= APPLICATION_WIDTH){
			vx = -vx;
		} 
    if (ball.getY()== 0){
			vy = -vy;
		} 
    if (ball.getX()<= APPLICATION_WIDTH*0){
			vx = -vx;
		} 
    else{ collision();		
		}
	}
	
  // What happens when the ball hits a brick and other objects
	private void collision(){
		if (getElementAt(ball.getX(), ball.getY()) != null){
			GObject collObj = getElementAt(ball.getX(), ball.getY());
			//if (collObj == ){ // For test purposes only
				vy = -vy;
				if(collObj != paddle){
					remove(collObj);
				}
			//}			
		} 
    if (getElementAt(ball.getX()+(BALL_RADIUS *2),ball.getY()) != null){
			GObject collObj = getElementAt(ball.getX()+(BALL_RADIUS *2),ball.getY());
			if (collObj == brick){
				vy = -vy;
				if(collObj != paddle){
					remove(collObj);
				}
			}
		} 
    if (getElementAt(ball.getX(),ball.getY()+(BALL_RADIUS *2)) != null){
			GObject collObj = getElementAt(ball.getX(),ball.getY()+(BALL_RADIUS *2));
			if (collObj == brick){
				if(collObj == paddle){
					double diff = ball.getY()- (getHeight()-BALL_RADIUS *2);
					ball.move(0, -2*diff);
					vy = -vy;					
				}
				if(collObj != paddle){
					vy = -vy;
					remove(collObj);
				}
			}
		} 
    if (getElementAt(ball.getX()+(BALL_RADIUS *2),ball.getY()+(BALL_RADIUS *2)) != null){
			GObject collObj = getElementAt(ball.getX()+(BALL_RADIUS *2),ball.getY()+(BALL_RADIUS *2));
			if (collObj == brick){
				if(collObj == paddle){
					double diff = ball.getY()- (getHeight()-BALL_RADIUS *2);
					ball.move(0, -2*diff);
					vy = -vy;				
				}
				if(collObj != paddle){
					vy = -vy;
					remove(collObj);
				}				
			}
		}		
	}
  
	// Move the ball	
	private void gmove(){
		ball.move(vx, vy);
	}
	
  // Create the paddle 
	private GRect createPaddle(){
		int x= 0;
		int y = APPLICATION_HEIGHT - PADDLE_Y_OFFSET;
		paddle = new GRect(x,y,PADDLE_WIDTH,PADDLE_HEIGHT);
		add(paddle);
		paddle.setFilled(true);
		return paddle;
	}
	
  // Create the bricks 
	private void createBricks(){
		for (int i =0; i < NBRICK_ROWS; i++){
			for (int j =0; j < NBRICKS_PER_ROW; j++){
				int x = 0;
				int y = 0;
				
				x = (BRICK_WIDTH +BRICK_SEP) *j+1;
				y = BRICK_Y_OFFSET+((BRICK_HEIGHT+BRICK_SEP)*i);
				
				add(brick = new GRect(x,y,BRICK_WIDTH,BRICK_HEIGHT));
				brick.setFilled(true);
				brick.setFillColor(Color.RED);
				brick.setColor(Color.RED);
				if (i == 2 || i == 3){
					brick.setFillColor(Color.ORANGE);
					brick.setColor(Color.ORANGE);
				} if (i == 4 || i == 5){
					brick.setFillColor(Color.YELLOW);
					brick.setColor(Color.YELLOW);
				} if (i == 6 || i == 7){
					brick.setFillColor(Color.GREEN);
					brick.setColor(Color.GREEN);
				} if (i == 8 || i == 9){
					brick.setFillColor(Color.CYAN);
					brick.setColor(Color.CYAN);
				}
			}
		}
	}
}
